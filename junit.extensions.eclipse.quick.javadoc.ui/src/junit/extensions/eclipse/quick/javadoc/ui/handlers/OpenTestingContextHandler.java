package junit.extensions.eclipse.quick.javadoc.ui.handlers;

import java.util.ArrayList;
import java.util.List;

import junit.extensions.eclipse.quick.javadoc.SearchJavaClassFromDocTagVisitor;
import junit.extensions.eclipse.quick.javadoc.ui.handlers.PopupTableSelector;
import junit.extensions.eclipse.quick.javadoc.ui.JavaDocUIActivator;

import org.eclipse.core.commands.AbstractHandler;
import org.eclipse.core.commands.Command;
import org.eclipse.core.commands.ExecutionEvent;
import org.eclipse.core.commands.ExecutionException;
import org.eclipse.core.commands.common.NotDefinedException;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IMember;
import org.eclipse.jdt.core.IMethod;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.search.SearchMatch;
import org.eclipse.jdt.core.search.SearchRequestor;
import org.eclipse.jdt.ui.JavaUI;
import org.eclipse.jface.text.ITextSelection;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.ISelectionProvider;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.handlers.HandlerUtil;
import org.eclipse.ui.texteditor.ITextEditor;

public class OpenTestingContextHandler extends AbstractHandler {

	private static final class SearchJavaClassRequestor extends SearchRequestor {
    	
    	private List<IJavaElement> results = new ArrayList<IJavaElement>();

		@Override
		public void acceptSearchMatch(SearchMatch match) throws CoreException {
			results.add((IJavaElement) match.getElement());
		}

		public List<IJavaElement> getResults() {
			return results;
		}
	}

	private static class TypeLabelProvider extends LabelProvider {
        public String getText(Object element) {
        	if(element == null){
				return "null";        		
        	} 
        	if (element instanceof IType) {
				return ((IType) element).getFullyQualifiedName();
			}
        	if(element instanceof IMethod){
				IMethod method = (IMethod) element;
				return method.getDeclaringType().getFullyQualifiedName() + "#" + method.getElementName();				
			}
        	String message = String.format("Illegal Element is gave '%s'",element.toString());
			throw new IllegalArgumentException(message);
        }
    }

	private ITextEditor javaEditor;

	public OpenTestingContextHandler() {
	}

	/**
	 * @see SearchJavaClassFromDocTagVisitor
	 * @see Test
	 */
	public Object execute(ExecutionEvent event) throws ExecutionException {
		IWorkbenchWindow window = HandlerUtil.getActiveWorkbenchWindowChecked(event);
		javaEditor = (ITextEditor)HandlerUtil.getActiveEditor(event);
		SearchJavaClassRequestor requestor = new SearchJavaClassRequestor();
		try {
			IJavaElement element = getElementOfJavaEditor();
			if (element instanceof IMethod || element instanceof IType) {
				IMember refs = (IMember) element;
				ASTParser parser = ASTParser.newParser(AST.JLS3);
				parser.setKind(ASTParser.K_CLASS_BODY_DECLARATIONS);
				String source = refs.getSource();
				parser.setSource(source.toCharArray());
				ASTNode node = parser.createAST(new NullProgressMonitor());
				ASTVisitor visitor = new SearchJavaClassFromDocTagVisitor(refs.getDeclaringType(),requestor);
				node.accept(visitor);
			}
			List<IJavaElement> results = requestor.getResults();
			Shell parent = window.getShell();
			if(!results.isEmpty()){
				IJavaElement selected = selectType(event.getCommand(),results,parent);
				JavaUI.openInEditor(selected);
			}
		} catch (JavaModelException e) {
			JavaDocUIActivator.getDefault().handleSystemError(e, this);
		} catch (CoreException e) {
			JavaDocUIActivator.getDefault().handleSystemError(e, this);
		} catch (NotDefinedException e) {
			JavaDocUIActivator.getDefault().handleSystemError(e, this);
		}
		return null;
	}
	    
    protected IJavaElement getElementOfJavaEditor() throws JavaModelException {
        ICompilationUnit unit = getCompilationUnitOfJavaEditor();
        if (unit == null)
            return null;
        ISelectionProvider provider = javaEditor.getSelectionProvider();
        ISelection selection = provider.getSelection();
        if (!(selection instanceof ITextSelection))
            return null;
        int offset = ((ITextSelection) selection).getOffset();
        IJavaElement element = unit.getElementAt(offset);
        return element;
    }
    
    protected ICompilationUnit getCompilationUnitOfJavaEditor() throws JavaModelException {
        if (javaEditor == null)
            return null;
        IEditorInput input = javaEditor.getEditorInput();
        IJavaElement element = (IJavaElement) input.getAdapter(IJavaElement.class);
        if (element instanceof ICompilationUnit)
            return (ICompilationUnit) element;
        return null;
    }

	private IJavaElement selectType(Command command,List<IJavaElement> types,Shell shell) throws NotDefinedException {
    	if(types.size() == 1) return types.get(0);
        PopupTableSelector selector = new PopupTableSelector(shell, types);
        selector.setTitle(command.getName());
        selector.setCommandForward(command.getId());
        selector.setLabelProvider(new TypeLabelProvider());
        return (IJavaElement) selector.select();
    }
    
}
